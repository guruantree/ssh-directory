Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W
        - E9007
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: DNS Configuration
        Parameters:
          - DomainName
          - SubDomainPrefix
          - HostedZoneID
          - Route53HostedSubdomainZone
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
      - Label:
          default: OpenShift Configuration
        Parameters:
          - RegistryBucket
    ParameterLabels:
      RegistryBucket:
        default: Registry Bucket
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      HostedZoneID:
        default: Route 53 Hosted Zone ID
      SubDomainPrefix:
        default: Subdomain Prefix
      Route53HostedSubdomainZone:
        default: Route 53 Subdomain Zone
Parameters:
  Route53HostedSubdomainZone:
    Type: String
  DomainName:
    Description: >-
      OPTIONAL: domain name configured for the cluster, if left blank self signed
      certificates will be used for TLS and the LoadBalancer's auto-generated hostname
      will be used for connections from outside the cluster.
    Type: String
    Default: ""
  SubDomainPrefix:
    Default: ''
    Description: 'OPTIONAL: Subdomain to use, if left blank DomainName will be used
      without a prefix. If you specify this you must also specify DomainName and HostedZoneID'
    Type: String
  HostedZoneID:
    Description: 'OPTIONAL: Route 53 Hosted Zone ID to use. If left blank route 53
      will not be configured and DNS must be setup manually If you specify this you must also specify DomainName'
    Type: String
    MaxLength: '32'
    Default: ""
  RegistryBucket:
    Description: 'The Name of the S3 Bucket for Image Container Registry'
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-redhat-openshift-4.3-preview/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  ACMCertificateLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Condition: SetupRoute53
    Properties:
      Description: Creates and verifies an ACM certificate using DNS validation and
        route53
      Handler: lambda_function.handler
      Runtime: python3.7
      Role: !GetAtt 'ACMCertificateRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/ACMCert/lambda.zip'
  ACMCertificateRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyWildcardResource: Certificate ARN is not yet determined
    Condition: SetupRoute53
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-acm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - acm:RequestCertificate
                  - acm:DescribeCertificate
                  - acm:DeleteCertificate
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource:
                  - !If
                    - SetupSubdomain
                    - !Sub 'arn:${AWS::Partition}:route53:::hostedzone/${Route53HostedSubdomainZone}'
                    - !Sub 'arn:${AWS::Partition}:route53:::hostedzone/${HostedZoneID}'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'
  KeyGen:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/KeyGen/lambda.zip'
      Handler: service.handler
      Runtime: python3.7
      Timeout: 300
      Role: !GetAtt 'KeyGenRole.Arn'
  KeyGenRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyWildcardResource: Stack arn is not determined
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: lambda_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'
  RegisterTypeRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyActionWildcard: CloudFormation stacks will be manipulated
            EIAMPolicyWildcardResource: CloudFormation stacks arn cannot be determined
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                  - "iam:PassRole"
                  - "iam:CreateRole"
                  - "iam:CreatePolicy"
                  - "iam:ListPolicyVersions"
                  - "iam:DeletePolicyVersion"
                  - "iam:CreatePolicyVersion"
                  - "iam:AttachRolePolicy"
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                  - "sts:GetCallerIdentity"
                  - "s3:GetObject"
                Resource: "*"
  ArtifactCopyPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LambdaZipsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow CloudFormation to copy artifacts from the bucket
            Effect: Allow
            Principal:
              Service: "cloudformation.amazonaws.com"
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}functions/packages/OpenShiftResource/awsqs-openshift-manager.zip"
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/KeyGen/lambda.zip
        - functions/packages/DeleteBucketContents/lambda.zip
        - functions/packages/ACMCert/lambda.zip
        - functions/packages/CleanupPV/lambda.zip
        - functions/packages/UnSubscribe/lambda.zip
        - functions/packages/OpenShiftResource/awsqs-openshift-manager.zip
  CleanupPVLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: When the OpenShift Quickstart is deleted this deletes any orphaned
        EBS volumes used as OpenShift Persistent Volumes
      Handler: lambda_function.handler
      Runtime: python3.7
      Role: !GetAtt 'CleanupPVRole.Arn'
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CleanupPV/lambda.zip'
  UnSubscribeLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'UnSubscribeRole.Arn'
      Runtime: python3.7
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/UnSubscribe/lambda.zip'
  DeleteBucketContentsRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
          ignore_reasons:
            EIAMPolicyActionWildcard: S3 bucket will be manipulated
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: deletebucketcontents
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${RegistryBucket}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${RegistryBucket}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:*:*:*
  DeleteBucketContentsLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'DeleteBucketContentsRole.Arn'
      Runtime: python3.7
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeleteBucketContents/lambda.zip'
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  UnSubscribeRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyWildcardResource: Lambda arn cannot be determined
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-unsubscribe
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'
  CleanupPVRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyWildcardResource: Does not support resource-level permission
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-cleanuppv
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVolumes
                  - ec2:DeleteVolume
                  - ec2:CreateTags
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*'
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse

          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          

          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          
          
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  OpenShiftCustomResourceExecutionRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
            - EIAMPolicyActionWildcard
          ignore_reasons:
            EIAMPolicyWildcardResource: Does not support resource-level permission
            EIAMPolicyActionWildcard: Elastic load balancer actions are needed
    Type: AWS::IAM::Role
    Properties:
      MaxSessionDuration: 8400
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "resources.cloudformation.amazonaws.com"
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DeleteSecurityGroup"
                  - "ec2:DescribeAccountAttributes"
                  - "ec2:DescribeImages"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeInternetGateways"
                  - "ec2:DescribeRouteTables"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeTags"
                  - "ec2:DescribeVolumes"
                  - "ec2:DescribeVpcAttribute"
                  - "ec2:DescribeVpcClassicLink"
                  - "ec2:DescribeVpcClassicLinkDnsSupport"
                  - "ec2:DescribeVpcEndpoints"
                  - "ec2:DescribeVpcs"
                  - "ec2:RevokeSecurityGroupIngress"
                  - "ec2:TerminateInstances"
                  - "elasticloadbalancing:*"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:GetUser"
                  - "iam:ListAccessKeys"
                  - "route53:ChangeResourceRecordSets"
                  - "route53:GetChange"
                  - "route53:GetHostedZone"
                  - "route53:ListHostedZones"
                  - "route53:ListHostedZonesByName"
                  - "route53:ListQueryLoggingConfigs"
                  - "route53:ListResourceRecordSets"
                  - "s3:*"
                  - "secretsmanager:CreateSecret"
                  - "secretsmanager:DeleteSecret"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:ListSecrets"
                  - "secretsmanager:PutSecretValue"
                  - "secretsmanager:TagResource"
                  - "ssm:*"
                  - "tag:GetResources"
                Resource: "*"
  OpenShiftCustomResourceLogDeliveryRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyWildcardResource: Logs and CloudWatch resources are not yet determined
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - resources.cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:PutMetricData"
                Resource: "*"
  RegisterType:
    DependsOn: CopyZips
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt OpenShiftCustomResourceRegisterTypeFunction.Arn
  OpenShiftCustomResourceRegisterTypeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Timeout: 900
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt RegisterTypeRole.Arn
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import logging
          import boto3
          from time import sleep

          def stabilize(token, cfn):
              p = cfn.describe_type_registration(RegistrationToken=token)
              while p['ProgressStatus'] == "IN_PROGRESS":
                  sleep(5)
                  p = cfn.describe_type_registration(RegistrationToken=token)
              if p['ProgressStatus'] == 'FAILED':
                  logging.error(p)
                  return cfnresponse.FAILED, p['TypeVersionArn']
              return cfnresponse.SUCCESS, p['TypeVersionArn']

          def register(cfn):
              response = cfn.register_type(
                  Type='RESOURCE',
                  TypeName='AWSQS::OpenShift::Manager',
                  SchemaHandlerPackage="s3://${LambdaZipsBucket}/${QSS3KeyPrefix}functions/packages/OpenShiftResource/awsqs-openshift-manager.zip",
                  LoggingConfig={"LogRoleArn": "${OpenShiftCustomResourceLogDeliveryRole.Arn}", "LogGroupName": "awsqs-openshift-manager-logs"},
                  ExecutionRoleArn="${OpenShiftCustomResourceExecutionRole.Arn}"
              )
              status, version_arn = stabilize(response['RegistrationToken'], cfn)
              cfn.set_type_default_version(Arn=version_arn)
              return status, version_arn

          def handler(event, context):
              print(event)
              status = cfnresponse.SUCCESS
              physical_id = event.get('PhysicalResourceId')
              try:
                  cfn = boto3.client('cloudformation')
                  if event['RequestType'] == 'Create':
                      status, physical_id = register(cfn)
                  if event['RequestType'] == 'Update':
                      status, physical_id = register(cfn)
                  if event['RequestType'] == 'Delete':
                      versions = cfn.list_type_versions(Type='RESOURCE', TypeName='AWSQS::OpenShift::Manager')['TypeVersionSummaries']
                      if len(versions) > 1:
                          try:
                              cfn.deregister_type(Arn=physical_id)
                          except Exception:
                              logging.error('Failed to deregister individual version %s. Trying to deregister type.', physical_id)
                              cfn.deregister_type(Type='RESOURCE', TypeName='AWSQS::OpenShift::Manager')
                      else:
                          cfn.deregister_type(Type='RESOURCE', TypeName='AWSQS::OpenShift::Manager')
              except Exception:
                  logging.error('Unhandled exception', exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, status, {}, physicalResourceId=physical_id)

Conditions:
  SetupSubdomain: !And
    - !Not
      - !Equals
        - !Ref 'SubDomainPrefix'
        - ''
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''
  SetupRoute53: !And
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''
Outputs:
  UnSubscribeLambdaArn:
    Description: "The ARN for the UnSubscribe custom resource"
    Value: !GetAtt UnSubscribeLambda.Arn
  CleanupPVLambdaArn:
    Description: "The ARN For the CleanupPV custom resource"
    Value: !GetAtt CleanupPVLambda.Arn
  KeyGenLambdaArn:
    Description: "The ARN For the KeyGen custom resource"
    Value: !GetAtt KeyGen.Arn
  ACMCertificateLambdaArn:
    Condition: SetupRoute53
    Description: "The ARN For the ACMCert custom resource"
    Value: !GetAtt ACMCertificateLambda.Arn
  DeleteBucketContentsLambdaArn:
    Description: "The ARN For the DeleteBucketContents custom resource"
    Value: !GetAtt DeleteBucketContentsLambda.Arn
  LambdaZipsBucket:
    Description: "The S3 Bucket to store all custom Lambda functions"
    Value: !Ref LambdaZipsBucket
  CopyZipsArn:
    Description: The ARN for the CopyZips custom resource. Use this to move Lambda deployments to a single bucket
    Value: !GetAtt CopyZipsFunction.Arn
