AWSTemplateFormatVersion: 2010-09-09
Description: Template for OpenShift Cluster Security Elements (Security Groups & IAM)

Parameters:
  InfrastructureName:
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9\-]{0,26})
    MaxLength: 27
    MinLength: 1
    ConstraintDescription: Infrastructure name must be alphanumeric, start with a letter, and have a maximum of 27 characters.
    Description: A short, unique cluster ID used to tag cloud resources and identify items owned or used by the cluster.
    Type: String
  VpcCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-4]))
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-24.
    Default: 10.0.0.0/16
    Description: CIDR block for VPC.
    Type: String
  VpcId:
    Description: The VPC-scoped resources will belong to this VPC.
    Type: AWS::EC2::VPC::Id
  ApplicationElbSecurityGroupId:
    Description: Group Id of Application Load Balancer
    Type: String
  ContainerAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String
  MasterInstanceProfileName:
    Description: (Optional) Provide an IAM Instance profile name to use for control plane nodes
    Type: String
    Default: ''
  WorkerInstanceProfileName:
    Description: (Optional) Provide an IAM Instance profile name to use for worker nodes
    Type: String
    Default: ''
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W
        - E9007
        - E9101
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Cluster Information"
        Parameters:
          - InfrastructureName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - VpcCidr
          - ApplicationElbSecurityGroupId
          - ContainerAccessCIDR
      - Label:
          default: "IAM Configuration"
        Parameters:
          - MasterInstanceProfileName
          - WorkerInstanceProfileName
    ParameterLabels:
      InfrastructureName:
        default: "Infrastructure Name"
      MasterInstanceProfileName:
        default: Master IAM Instance Profile Name
      WorkerInstanceProfileName:
        default: Worker IAM Instance Profile Name
      VpcId:
        default: "VPC ID"
      VpcCidr:
        default: "VPC CIDR"
      ApplicationElbSecurityGroupId:
        default: "Application ELB Security Group ID"
      ContainerAccessCIDR:
        default: Allowed External Access CIDR (OCP Router)
Resources:
  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster Master Security Group
      Tags:
        - Key: Name
          Value: !Sub "${InfrastructureName}-master-sg"
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          ToPort: 6443
          FromPort: 6443
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 22623
          ToPort: 22623
          CidrIp: !Ref VpcCidr
      VpcId: !Ref VpcId

  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${InfrastructureName}-worker-sg"
      GroupDescription: Cluster Worker Security Group
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCidr
      VpcId: !Ref VpcId

  MasterIngressEtcd:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      Description: etcd
      FromPort: 2379
      ToPort: 2380
      IpProtocol: tcp

  MasterIngressVxlan:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      Description: Vxlan packets
      FromPort: 4789
      ToPort: 4789
      IpProtocol: udp

  MasterIngressWorkerVxlan:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt WorkerSecurityGroup.GroupId
      Description: Vxlan packets
      FromPort: 4789
      ToPort: 4789
      IpProtocol: udp

  MasterIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      Description: Internal cluster communication
      FromPort: 9000
      ToPort: 9999
      IpProtocol: tcp

  MasterIngressWorkerInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt WorkerSecurityGroup.GroupId
      Description: Internal cluster communication
      FromPort: 9000
      ToPort: 9999
      IpProtocol: tcp

  MasterIngressKube:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      Description: Kubernetes kubelet, scheduler and controller manager
      FromPort: 10250
      ToPort: 10259
      IpProtocol: tcp

  MasterIngressWorkerKube:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt WorkerSecurityGroup.GroupId
      Description: Kubernetes kubelet, scheduler and controller manager
      FromPort: 10250
      ToPort: 10259
      IpProtocol: tcp

  MasterIngressIngressServices:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      Description: Kubernetes ingress services
      FromPort: 30000
      ToPort: 32767
      IpProtocol: tcp

  MasterIngressWorkerIngressServices:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt WorkerSecurityGroup.GroupId
      Description: Kubernetes ingress services
      FromPort: 30000
      ToPort: 32767
      IpProtocol: tcp

  WorkerIngressApplicationLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateApplicationIngressRule
    Properties:
      Description: Allow all traffic from Load Balancer
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      SourceSecurityGroupId: !Ref ApplicationElbSecurityGroupId
      IpProtocol: "-1"

  WorkerIngressPassthroughTLSInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateApplicationIngressRule
    Properties:
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      Description: Allow internal TLS:443
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref VpcCidr

  WorkerIngressPassthroughTCPInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateApplicationIngressRule
    Properties:
      Description: Allow internal TCP:80
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref VpcCidr

  WorkerIngressPassthroughTLSLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateApplicationIngressRule
    Properties:
      Description: Allow external TLS:443
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref ContainerAccessCIDR

  WorkerIngressPassthroughTCPLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateApplicationIngressRule
    Properties:
      Description: Allow external TCP:80
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref ContainerAccessCIDR

  WorkerIngressPassthroughHealthCheckLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateApplicationIngressRule
    Properties:
      Description: Healthcheck
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 1936
      ToPort: 1936
      CidrIp: !Ref VpcCidr

  WorkerIngressVxlan:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt WorkerSecurityGroup.GroupId
      Description: Vxlan packets
      FromPort: 4789
      ToPort: 4789
      IpProtocol: udp

  WorkerIngressWorkerVxlan:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      Description: Vxlan packets
      FromPort: 4789
      ToPort: 4789
      IpProtocol: udp

  WorkerIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt WorkerSecurityGroup.GroupId
      Description: Internal cluster communication
      FromPort: 9000
      ToPort: 9999
      IpProtocol: tcp

  WorkerIngressWorkerInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      Description: Internal cluster communication
      FromPort: 9000
      ToPort: 9999
      IpProtocol: tcp

  WorkerIngressKube:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt WorkerSecurityGroup.GroupId
      Description: Kubernetes secure kubelet port
      FromPort: 10250
      ToPort: 10250
      IpProtocol: tcp

  WorkerIngressWorkerKube:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      Description: Internal Kubernetes communication
      FromPort: 10250
      ToPort: 10250
      IpProtocol: tcp

  WorkerIngressIngressServices:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt WorkerSecurityGroup.GroupId
      Description: Kubernetes ingress services
      FromPort: 30000
      ToPort: 32767
      IpProtocol: tcp

  WorkerIngressWorkerIngressServices:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt WorkerSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId
      Description: Kubernetes ingress services
      FromPort: 30000
      ToPort: 32767
      IpProtocol: tcp

  MasterIamRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyActionWildcard: Multiple actions are needed for manipulation
            EIAMPolicyWildcardResource: EC2 doesn't support resource-level permissions
    Type: AWS::IAM::Role
    Condition: CreateMasterInstanceProfile
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join ["-", [!Ref InfrastructureName, "master", "policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "ec2:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "elasticloadbalancing:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "iam:PassRole"
                Resource: "*"
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource: "*"

  MasterInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Condition: CreateMasterInstanceProfile
    Properties:
      InstanceProfileName: !Join ["-", [!Ref InfrastructureName, "master", "profile"]]
      Roles:
        - Ref: "MasterIamRole"

  WorkerIamRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
          ignore_reasons:
            EIAMPolicyActionWildcard: EC2 describe actions are needed for manipulation
    Type: AWS::IAM::Role
    Condition: CreateWorkerInstanceProfile
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join ["-", [!Ref InfrastructureName, "worker", "policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "ec2:Describe*"
                Resource: "*"

  WorkerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Condition: CreateWorkerInstanceProfile
    Properties:
      InstanceProfileName: !Join ["-", [!Ref InfrastructureName, "worker", "profile"]]
      Roles:
        - Ref: "WorkerIamRole"
Conditions:
  CreateWorkerInstanceProfile: !Equals
    - !Ref WorkerInstanceProfileName
    - ""
  CreateMasterInstanceProfile: !Equals
    - !Ref WorkerInstanceProfileName
    - ""
  CreateApplicationIngressRule: !Not
    - !Equals
      - !Ref ApplicationElbSecurityGroupId
      - ""

Outputs:
  MasterSecurityGroupId:
    Description: Master Security Group ID
    Value: !GetAtt MasterSecurityGroup.GroupId

  WorkerSecurityGroupId:
    Description: Worker Security Group ID
    Value: !GetAtt WorkerSecurityGroup.GroupId

  MasterInstanceProfile:
    Description: Master IAM Instance Profile
    Value: !If
      - CreateMasterInstanceProfile
      - !Ref MasterInstanceProfile
      - !Ref MasterInstanceProfileName

  WorkerInstanceProfile:
    Description: Worker IAM Instance Profile
    Value: !If
      - CreateWorkerInstanceProfile
      - !Ref WorkerInstanceProfile
      - !Ref WorkerInstanceProfileName
