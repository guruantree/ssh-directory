AWSTemplateFormatVersion: 2010-09-09
Description: Template for OpenShift Cluster Network Elements (Route53 & LBs)

Parameters:
  ClusterName:
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9\-]{0,26})
    MaxLength: 27
    MinLength: 1
    ConstraintDescription: Cluster name must be alphanumeric, start with a letter, and have a maximum of 27 characters.
    Description: A short, representative cluster name to use for host names and other identifying names.
    Type: String
  InfrastructureName:
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9\-]{0,26})
    MaxLength: 27
    MinLength: 1
    ConstraintDescription: Infrastructure name must be alphanumeric, start with a letter, and have a maximum of 27 characters.
    Description: A short, unique cluster ID used to tag cloud resources and identify items owned or used by the cluster.
    Type: String
  HostedZoneID:
    Description: The Route53 public zone ID to register the targets with, such as Z21IXYZABCZ2A4.
    Type: String
  HostedZoneName:
    Description: The Route53 zone to register the targets with, such as example.com. Omit the trailing period.
    Type: String
    Default: "example.com"
  PublicSubnets:
    Description: The internet-facing subnets.
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnets:
    Description: The internal subnets.
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: The VPC-scoped resources will belong to this VPC.
    Type: AWS::EC2::VPC::Id
  ACMCertificateId:
    Description: An ARN for an ACM certificate
    Type: String
    Default: ""
  ContainerAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W
        - E9007
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Cluster Information"
        Parameters:
          - ClusterName
          - InfrastructureName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - PublicSubnets
          - PrivateSubnets
          - ACMCertificateId
          - ContainerAccessCIDR
      - Label:
          default: "DNS"
        Parameters:
          - HostedZoneName
          - HostedZoneID
    ParameterLabels:
      ClusterName:
        default: "Cluster Name"
      InfrastructureName:
        default: "Infrastructure Name"
      VpcId:
        default: "VPC ID"
      PublicSubnets:
        default: "Public Subnets"
      PrivateSubnets:
        default: "Private Subnets"
      HostedZoneName:
        default: "Public Hosted Zone Name"
      HostedZoneID:
        default: "Public Hosted Zone ID"
      ACMCertificateId:
        default: "ACM Certificate ARN"
      ContainerAccessCIDR:
        default: Allowed External Access CIDR (OCP Router)

Resources:

  ApplicationElb:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!Ref InfrastructureName, "apps"]]
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ApplicationElbSecurityGroup.GroupId
      IpAddressType: ipv4
      Subnets: !Ref PublicSubnets
      Type: application

  ApplicationElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${InfrastructureName}-apps-lb-sg"
      GroupDescription: Allow TCP:80, 443 to OpenShift application loadbalancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ContainerAccessCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ContainerAccessCIDR
      VpcId: !Ref VpcId


  ExtPassthroughElb:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!Ref InfrastructureName, "pass"]]
      IpAddressType: ipv4
      Subnets: !Ref PublicSubnets
      Type: network

  IntPassthroughElb:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!Ref InfrastructureName, "ipas"]]
      IpAddressType: ipv4
      Scheme: internal
      Subnets: !Ref PrivateSubnets
      Type: network

  ExtApiElb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!Ref InfrastructureName, "ext"]]
      IpAddressType: ipv4
      Subnets: !Ref PublicSubnets
      Type: network

  IntApiElb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!Ref InfrastructureName, "int"]]
      Scheme: internal
      IpAddressType: ipv4
      Subnets: !Ref PrivateSubnets
      Type: network


  IntDns:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: "Managed by CloudFormation"
      Name: !Join [".", [!Ref ClusterName, !Ref HostedZoneName]]
      HostedZoneTags:
        - Key: Name
          Value: !Join ["-", [!Ref InfrastructureName, "int"]]
        - Key: !Join ["", ["kubernetes.io/cluster/", !Ref InfrastructureName]]
          Value: "owned"
      VPCs:
        - VPCId: !Ref VpcId
          VPCRegion: !Ref "AWS::Region"

  ExtAppServerRecord:
    Condition: HasACMCertificate
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Alias record for the Passthrough ingress
      HostedZoneId: !Ref HostedZoneID
      RecordSets:
        - Name:
            !Join [
              ".",
              ["*", "apps", !Ref ClusterName, !Join ["", [!Ref HostedZoneName, "."]]],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ApplicationElb.CanonicalHostedZoneID
            DNSName: !GetAtt ApplicationElb.DNSName

  IntAppServerRecord:
    Condition: HasACMCertificate
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Alias record for the Passthrough ingress
      HostedZoneId: !Ref IntDns
      RecordSets:
        - Name:
            !Join [
              ".",
              ["*", "apps", !Ref ClusterName, !Join ["", [!Ref HostedZoneName, "."]]],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ApplicationElb.CanonicalHostedZoneID
            DNSName: !GetAtt ApplicationElb.DNSName

  ExtPassthroughServerRecord:
    Condition: HasACMCertificate
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Alias record for the Passthrough ingress
      HostedZoneId: !Ref HostedZoneID
      RecordSets:
        - Name:
            !Join [
              ".",
              ["*", "passthrough", !Ref ClusterName, !Join ["", [!Ref HostedZoneName, "."]]],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ExtPassthroughElb.CanonicalHostedZoneID
            DNSName: !GetAtt ExtPassthroughElb.DNSName
        - Name:
            !Join [
              ".",
              ["oauth-openshift", "apps", !Ref ClusterName, !Join ["", [!Ref HostedZoneName, "."]]],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ExtPassthroughElb.CanonicalHostedZoneID
            DNSName: !GetAtt ExtPassthroughElb.DNSName

  InternalPassthroughAppServerRecord:
    Condition: HasACMCertificate
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Alias record for the internal Passthrough server ingress
      HostedZoneId: !Ref IntDns
      RecordSets:
        - Name:
            !Join [
              ".",
              ["oauth-openshift", "apps", !Ref ClusterName, !Join ["", [!Ref HostedZoneName, "."]]],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt IntPassthroughElb.CanonicalHostedZoneID
            DNSName: !GetAtt IntPassthroughElb.DNSName
        - Name:
            !Join [
              ".",
              ["*", "passthrough", !Ref ClusterName, !Join ["", [!Ref HostedZoneName, "."]]],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt IntPassthroughElb.CanonicalHostedZoneID
            DNSName: !GetAtt IntPassthroughElb.DNSName

  ExternalApiServerRecord:
    Type: AWS::Route53::RecordSetGroup
    Condition: HasExternalDNSZone
    Properties:
      Comment: Alias record for the API server
      HostedZoneId: !Ref HostedZoneID
      RecordSets:
        - Name:
            !Join [
              ".",
              ["api", !Ref ClusterName, !Join ["", [!Ref HostedZoneName, "."]]],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ExtApiElb.CanonicalHostedZoneID
            DNSName: !GetAtt ExtApiElb.DNSName

  InternalApiServerRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Alias record for the API server
      HostedZoneId: !Ref IntDns
      RecordSets:
        - Name:
            !Join [
              ".",
              ["api", !Ref ClusterName, !Join ["", [!Ref HostedZoneName, "."]]],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt IntApiElb.CanonicalHostedZoneID
            DNSName: !GetAtt IntApiElb.DNSName
        - Name:
            !Join [
              ".",
              ["api-int", !Ref ClusterName, !Join ["", [!Ref HostedZoneName, "."]]],
            ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt IntApiElb.CanonicalHostedZoneID
            DNSName: !GetAtt IntApiElb.DNSName

  ApplicationHTTPSListener:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ApplicationHTTPSTargetGroup
      LoadBalancerArn:
        Ref: ApplicationElb
      Port: 443
      Certificates:
        - CertificateArn: !Ref ACMCertificateId
      Protocol: HTTPS

  ApplicationHTTPListener:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ApplicationHTTPTargetGroup
      LoadBalancerArn:
        Ref: ApplicationElb
      Port: 80
      Protocol: HTTP

  ApplicationHTTPTargetGroup:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      HealthCheckEnabled: true
      HealthCheckPath: /healthz
      HealthCheckPort: '1936'
      HealthCheckProtocol: HTTP

  ApplicationHTTPSTargetGroup:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      HealthCheckEnabled: true
      HealthCheckPath: /healthz
      HealthCheckPort: '1936'
      HealthCheckProtocol: HTTP

  IntPassthroughTLSListener:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: IntPassthroughTLSTargetGroup
      LoadBalancerArn:
        Ref: IntPassthroughElb
      Port: 443
      Protocol: TCP

  IntPassthroughTCPListener:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: IntPassthroughTCPTargetGroup
      LoadBalancerArn:
        Ref: IntPassthroughElb
      Port: 80
      Protocol: TCP

  ExtPassthroughTLSListener:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ExtPassthroughTLSTargetGroup
      LoadBalancerArn:
        Ref: ExtPassthroughElb
      Port: 443
      Protocol: TCP

  ExtPassthroughTCPListener:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ExtPassthroughTCPTargetGroup
      LoadBalancerArn:
        Ref: ExtPassthroughElb
      Port: 80
      Protocol: TCP

  ExtPassthroughTCPTargetGroup:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      TargetType: instance
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      HealthCheckEnabled: true
      HealthCheckPath: /healthz
      HealthCheckPort: '1936'
      HealthCheckProtocol: HTTP

  ExtPassthroughTLSTargetGroup:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: TCP
      TargetType: instance
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      HealthCheckEnabled: true
      HealthCheckPath: /healthz
      HealthCheckPort: '1936'
      HealthCheckProtocol: HTTP

  IntPassthroughTCPTargetGroup:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      TargetType: instance
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      HealthCheckEnabled: true
      HealthCheckPath: /healthz
      HealthCheckPort: '1936'
      HealthCheckProtocol: HTTP

  IntPassthroughTLSTargetGroup:
    Condition: HasACMCertificate
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: TCP
      TargetType: instance
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      HealthCheckEnabled: true
      HealthCheckPath: /healthz
      HealthCheckPort: '1936'
      HealthCheckProtocol: HTTP

  ExternalApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ExternalApiTargetGroup
      LoadBalancerArn:
        Ref: ExtApiElb
      Port: 6443
      Protocol: TCP

  ExternalApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 6443
      Protocol: TCP
      TargetType: ip
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'

  InternalApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: InternalApiTargetGroup
      LoadBalancerArn:
        Ref: IntApiElb
      Port: 6443
      Protocol: TCP

  InternalApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 6443
      Protocol: TCP
      TargetType: ip
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'

  InternalServiceInternalListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: InternalServiceTargetGroup
      LoadBalancerArn:
        Ref: IntApiElb
      Port: 22623
      Protocol: TCP

  InternalServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 22623
      Protocol: TCP
      TargetType: ip
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'


  RegisterTargetLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref InfrastructureName, "nlb", "lambda", "role"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Join ["-", [!Ref InfrastructureName, "master", "policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  [
                    "elasticloadbalancing:RegisterTargets",
                    "elasticloadbalancing:DeregisterTargets",
                  ]
                Resource: !Ref InternalApiTargetGroup
              - Effect: "Allow"
                Action:
                  [
                    "elasticloadbalancing:RegisterTargets",
                    "elasticloadbalancing:DeregisterTargets",
                  ]
                Resource: !Ref InternalServiceTargetGroup
              - Effect: "Allow"
                Action:
                  [
                    "elasticloadbalancing:RegisterTargets",
                    "elasticloadbalancing:DeregisterTargets",
                  ]
                Resource: !Ref ExternalApiTargetGroup

  RegisterNlbIpTargets:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
          - "RegisterTargetLambdaIamRole"
          - "Arn"
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          def handler(event, context):
            elb = boto3.client('elbv2')
            if event['RequestType'] == 'Delete':
              elb.deregister_targets(TargetGroupArn=event['ResourceProperties']['TargetArn'],Targets=[{'Id': event['ResourceProperties']['TargetIp']}])
            elif event['RequestType'] == 'Create':
              elb.register_targets(TargetGroupArn=event['ResourceProperties']['TargetArn'],Targets=[{'Id': event['ResourceProperties']['TargetIp']}])
            responseData = {}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['ResourceProperties']['TargetArn']+event['ResourceProperties']['TargetIp'])
      Runtime: "python3.7"
      Timeout: 120

  RegisterSubnetTagsLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref InfrastructureName, "subnet-tags-lambda-role"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Join ["-", [!Ref InfrastructureName, "subnet-tagging-policy"]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  [
                    "ec2:DeleteTags",
                    "ec2:CreateTags"
                  ]
                Resource: !Sub "arn:${AWS::Partition}:ec2:*:*:subnet/*"
              - Effect: "Allow"
                Action:
                  [
                    "ec2:DescribeSubnets",
                    "ec2:DescribeTags"
                  ]
                Resource: "*"

  RegisterSubnetTags:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
          - "RegisterSubnetTagsLambdaIamRole"
          - "Arn"
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          def handler(event, context):
            ec2_client = boto3.client('ec2')
            if event['RequestType'] == 'Delete':
              for subnet_id in event['ResourceProperties']['Subnets']:
                ec2_client.delete_tags(Resources=[subnet_id], Tags=[{'Key': 'kubernetes.io/cluster/' + event['ResourceProperties']['InfrastructureName']}]);
            elif event['RequestType'] == 'Create':
              for subnet_id in event['ResourceProperties']['Subnets']:
                ec2_client.create_tags(Resources=[subnet_id], Tags=[{'Key': 'kubernetes.io/cluster/' + event['ResourceProperties']['InfrastructureName'], 'Value': 'shared'}]);
            responseData = {}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['ResourceProperties']['InfrastructureName']+event['ResourceProperties']['Subnets'][0])

      Runtime: "python3.7"
      Timeout: 120


  OpenShift4ScalingCWEventRule:
    Condition: HasACMCertificate
    Type: AWS::Events::Rule
    Properties:
      Description: CWEvent rule to trigger worker node attachment to loadbalancers
      State: ENABLED
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - running
      Targets:
        - Id: OpenShiftScaleEvent
          Arn: !GetAtt RegisterWorkersToAppNlb.Arn

  RegisterWorkersToAppNlb:
    Condition: HasACMCertificate
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt RegisterWorkersLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          def handler(event, context):
            elb = boto3.client('elbv2')
            ec2 = boto3.client('ec2')
            ec2_resource = boto3.resource('ec2')
            print(f"Instance ID: {event['detail']['instance-id']}")
            instance = ec2_resource.Instance(event['detail']['instance-id'])
            belongs_to_cluster = False
            if instance.tags:
              for tag in instance.tags:
                if tag['Key'] == 'kubernetes.io/cluster/${InfrastructureName}':
                  belongs_to_cluster = True
            if not belongs_to_cluster:
              print(f"Instance ID: {event['detail']['instance-id']} does not belong to cluster ${InfrastructureName}")
              return
            elb.register_targets(TargetGroupArn='${ExtPassthroughTCPTargetGroup}',Targets=[{'Id': instance.id, 'Port': 80}])
            elb.register_targets(TargetGroupArn='${ExtPassthroughTLSTargetGroup}',Targets=[{'Id': instance.id, 'Port': 443}])
            elb.register_targets(TargetGroupArn='${IntPassthroughTCPTargetGroup}',Targets=[{'Id': instance.id, 'Port': 80}])
            elb.register_targets(TargetGroupArn='${IntPassthroughTLSTargetGroup}',Targets=[{'Id': instance.id, 'Port': 443}])
            elb.register_targets(TargetGroupArn='${ApplicationHTTPTargetGroup}',Targets=[{'Id': instance.id, 'Port': 80}])
            elb.register_targets(TargetGroupArn='${ApplicationHTTPSTargetGroup}',Targets=[{'Id': instance.id, 'Port': 443}])
      Runtime: "python3.7"
      Timeout: 120

  PermissionForEventsToInvokeLambda:
    Condition: HasACMCertificate
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RegisterWorkersToAppNlb
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt OpenShift4ScalingCWEventRule.Arn

  RegisterWorkersLambdaRole:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyWildcardResource: EC2 doesnt support resource-level permissions
    Condition: HasACMCertificate
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: Attach-OpenShift-Workers
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: elasticloadbalancing:RegisterTargets
                Effect: Allow
                Resource: '*'

  RegisterPublicSubnetTags:
    Type: Custom::SubnetRegister
    Properties:
      ServiceToken: !GetAtt RegisterSubnetTags.Arn
      InfrastructureName: !Ref InfrastructureName
      Subnets: !Ref PublicSubnets

  RegisterPrivateSubnetTags:
    Type: Custom::SubnetRegister
    Properties:
      ServiceToken: !GetAtt RegisterSubnetTags.Arn
      InfrastructureName: !Ref InfrastructureName
      Subnets: !Ref PrivateSubnets

Conditions:
  HasACMCertificate: !Not
    - !Equals
      - !Ref ACMCertificateId
      - ""
  HasExternalDNSZone: !Not
    - !Equals
      - !Ref HostedZoneID
      - ""
Outputs:
  PrivateHostedZoneId:
    Description: Hosted zone ID for the private DNS, which is required for private records.
    Value: !Ref IntDns
  ExternalApiLoadBalancerName:
    Description: Full name of the External API load balancer created.
    Value: !GetAtt ExtApiElb.LoadBalancerFullName
  InternalApiLoadBalancerName:
    Description: Full name of the Internal API load balancer created.
    Value: !GetAtt IntApiElb.LoadBalancerFullName
  IntPassthroughLoadBalancerName:
    Description: Full name of the Application Load Balancer
    Value: !If
      - HasACMCertificate
      - !GetAtt IntPassthroughElb.LoadBalancerFullName
      - ""
  IntPassthroughTCPTargetGroupArn:
    Description: ARN of Apps HTTP target group.
    Value: !If
      - HasACMCertificate
      - !Ref IntPassthroughTCPTargetGroup
      - ""
  IntPassthroughTLSTargetGroupArn:
    Description: ARN of Apps HTTPS target group.
    Value: !If
      - HasACMCertificate
      - !Ref IntPassthroughTLSTargetGroup
      - ""
  ExtPassthroughLoadBalancerName:
    Description: Full name of the Application Load Balancer
    Value: !If
      - HasACMCertificate
      - !GetAtt ExtPassthroughElb.LoadBalancerFullName
      - ""
  ExtPassthroughTCPTargetGroupArn:
    Description: ARN of Apps HTTP target group.
    Value: !If
      - HasACMCertificate
      - !Ref ExtPassthroughTCPTargetGroup
      - ""
  ExtPassthroughTLSTargetGroupArn:
    Description: ARN of Apps HTTPS target group.
    Value: !If
      - HasACMCertificate
      - !Ref ExtPassthroughTLSTargetGroup
      - ""
  ApiServerDnsName:
    Description: Full hostname of the API server, which is required for the Ignition config files.
    Value: !Join [".", ["api-int", !Ref ClusterName, !Ref HostedZoneName]]
  ExtApiServerDnsName:
    Description: Full hostname of the API server, which is required for the Ignition config files.
    Value: !Join [".", ["api", !Ref ClusterName, !Ref HostedZoneName]]
  RegisterNlbIpTargetsLambda:
    Description: Lambda ARN useful to help register or deregister IP targets for these load balancers.
    Value: !GetAtt RegisterNlbIpTargets.Arn
  ExternalApiTargetGroupArn:
    Description: ARN of External API target group.
    Value: !Ref ExternalApiTargetGroup
  InternalApiTargetGroupArn:
    Description: ARN of Internal API target group.
    Value: !Ref InternalApiTargetGroup
  InternalServiceTargetGroupArn:
    Description: ARN of internal service target group.
    Value: !Ref InternalServiceTargetGroup
  ApplicationElbSecurityGroupId:
    Description: Group ID of Application security group
    Value: !GetAtt ApplicationElbSecurityGroup.GroupId
