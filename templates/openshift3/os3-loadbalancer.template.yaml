AWSTemplateFormatVersion: '2010-09-09'
Description: '(qs-1nltbq5f8) OpenShift, License: Apache 2.0 (Please do not remove)
  April, 6, 2018'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: OpenShift Configuration
        Parameters:
          - ClusterName
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - RemoteAccessCIDR
          - ContainerAccessCIDR
      - Label:
          default: LoadBalancer Configuration
        Parameters:
          - Protocol
          - SSLCertificateId
          - NumberOfAZs

Parameters:
  HostedZoneID:
    Type: String
  DomainName:
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String
  ContainerAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the Workload (e.g.,
      subnet-a0246dcd)
    Type: String
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the Workload (e.g.,
      subnet-b1f432cd)
    Type: String
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the Workload (e.g.,
      subnet-b1f4a2cd)
    Type: String
  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer
      (e.g., subnet-9bc642ac)
    Type: String
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer
      (e.g., subnet-e3246d8e)
    Type: String
  PublicSubnet3ID:
    Description: ID of public subnet 3 in Availability Zone 3 for the ELB load balancer
      (e.g., subnet-e324ad8e)
    Type: String
  SSLCertificateId:
    Type: String
    Description: ''
  Protocol:
    Type: String
    Description: ''
    AllowedValues:
    - 'SSL'
    - 'TCP'
  NumberOfAZs:
    Default: 3
    Description: The number of Availability Zones to be used for the deployment. 3 Availability Zones are needed to avoid a single point of failure when using 3 or more master nodes or etcd nodes.  With less than 3 Availability Zones.
    Type: Number
    AllowedValues:
    - 1
    - 3
  ClusterName:
    Default: ""
    Description: Custom cluster name for kubernetes.io/cluster/ tags, if left blank will use the stackname suffixed with the region
    Type: String


Resources:

  #
  # Primary Security Group for all cluster EC2 instances
  #
  OpenShiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow web console and ssh access to the master instances
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'RemoteAccessCIDR'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'RemoteAccessCIDR'
      Tags:
        - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
          Value: owned

  #
  # Security Group for the Container Access Load Balancer
  #
  OpenShiftNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https access to Openshift routers
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'ContainerAccessCIDR'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'ContainerAccessCIDR'
      Tags:
        - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
          Value: owned

  OpenShiftMasterELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 300
      CrossZone: true
      Subnets: !If
        - 3AZCondition
        - -  !Ref 'PublicSubnet1ID'
          -  !Ref 'PublicSubnet2ID'
          -  !Ref 'PublicSubnet3ID'
        - -  !Ref 'PublicSubnet1ID' 
      SecurityGroups:
        - !Ref 'OpenShiftSecurityGroup'
      Listeners:
        - InstancePort: '443'
          InstanceProtocol: !Ref Protocol
          LoadBalancerPort: '443'
          Protocol: !Ref Protocol
          SSLCertificateId: !Ref SSLCertificateId
      HealthCheck:
        Target: HTTPS:443/api/
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '3'

  #
  # Load Balancer for user traffic to OpenShift applications
  #
  ContainerAccessELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 300
      CrossZone: true
      Subnets: !If
        - 3AZCondition
        - -  !Ref 'PublicSubnet1ID'
          -  !Ref 'PublicSubnet2ID'
          -  !Ref 'PublicSubnet3ID'
        - -  !Ref 'PublicSubnet1ID'
      SecurityGroups:
        - !Ref 'OpenShiftNodeSecurityGroup'
      Listeners:
        - InstancePort: '443'
          InstanceProtocol: !Ref Protocol
          LoadBalancerPort: '443'
          Protocol: !Ref Protocol
          SSLCertificateId: !Ref SSLCertificateId
        - InstancePort: '80'
          InstanceProtocol: TCP
          LoadBalancerPort: '80'
          Protocol: TCP
      HealthCheck:
        Target: TCP:22
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '3'
      Tags:
        - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
          Value: owned

  #
  # Internal LoadBalancer for the Master API
  #
  OpenShiftMasterInternalELB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      Subnets: !If
        - 3AZCondition
        - -  !Ref 'PrivateSubnet1ID'
          -  !Ref 'PrivateSubnet2ID'
          -  !Ref 'PrivateSubnet3ID'
        - -  !Ref 'PrivateSubnet1ID' 
      Type: network
      Tags:
        - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
          Value: owned

  OpenShiftMasterInternalELBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: '22'
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 3
      Port: 443
      Protocol: TCP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCID
      Tags:
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: owned

  OpenShiftMasterInternalELBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref OpenShiftMasterInternalELBTargetGroup
      LoadBalancerArn: !Ref OpenShiftMasterInternalELB
      Port: 443
      Protocol: TCP

  Route53WildCard:
    Condition: SetupRoute53
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !Sub '*.${DomainName}'
      AliasTarget:
        HostedZoneId: !GetAtt 'ContainerAccessELB.CanonicalHostedZoneNameID'
        DNSName: !GetAtt 'ContainerAccessELB.DNSName'
      HostedZoneId: !Ref HostedZoneID

  Route53MasterELBRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !Ref DomainName
      AliasTarget:
        HostedZoneId: !GetAtt 'OpenShiftMasterELB.CanonicalHostedZoneNameID'
        DNSName: !GetAtt 'OpenShiftMasterELB.DNSName'
      HostedZoneId: !Ref HostedZoneID

Conditions:
  3AZCondition: !Equals [!Ref NumberOfAZs, 3]
  SetupRoute53: !And
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''

Outputs:

  OpenShiftMasterInternalELBTargetGroup:
    Description: Internal Load Balancer target group for OpenShift Masters
    Value: !Ref OpenShiftMasterInternalELBTargetGroup  

  OpenShiftMasterInternalELB:
    Description: Internal Load Balancer for OpenShift Masters
    Value: !Ref 'OpenShiftMasterInternalELB'

  OpenShiftMasterInternalELBDNSName:
    Description: Full DNS name for internal Master load balancer
    Value: !GetAtt OpenShiftMasterInternalELB.DNSName

  OpenShiftNodeSecurityGroup:
    Description: Load Balancer Security Group ID
    Value: !Ref OpenShiftNodeSecurityGroup

  ContainerAccessELBDNSName:
    Description: Use this ELB to expose ports to the internet
    Value: !GetAtt ContainerAccessELB.DNSName

  ContainerAccessELB:
    Description: Required to update additional ports
    Value: !Ref 'ContainerAccessELB'

  OpenShiftMasterELBDNSName:
    Description: Full DNS name for the external Master load balancer
    Value: !GetAtt OpenShiftMasterELB.DNSName

  ContainerAccessELBHostedZoneNameID:
    Description: Container ELB Hosted Zone ID
    Value: !GetAtt ContainerAccessELB.CanonicalHostedZoneNameID

  OpenShiftMasterELB:
    Description: The Master external Load balancer
    Value: !Ref OpenShiftMasterELB

  OpenShiftSecurityGroup:
    Description: The shared security group for all OpenShift nodes
    Value: !Ref OpenShiftSecurityGroup

