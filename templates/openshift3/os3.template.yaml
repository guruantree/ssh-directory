AWSTemplateFormatVersion: '2010-09-09'
Description: '(qs-1nltbq5f3) OpenShift+VPC, License: Apache 2.0 (Please do not remove)
  April, 6, 2018'
Metadata:

  AWSAMIRegionMap:
    Filters:
      RHEL76HVM:
        name: RHEL-7.7_HVM_GA-20??????-x86_64-?-Hourly?-GP2
        owner-id: "309956199498"
        architecture: x86_64
        virtualization-type: hvm

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: DNS Configuration
        Parameters:
          - HostedZoneID
          - DomainName
          - SubDomainPrefix
          - CertificateArn
      - Label:
          default: Custom Resources
        Parameters:
          - KeyGenLambdaArn
          - UnSubscribeLambdaArn
          - CleanupPVLambdaArn
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - AnsibleSubnetID
          - RemoteAccessCIDR
          - ContainerAccessCIDR
          - NumberOfAZs
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - AmiId
      - Label:
          default: OpenShift Hosts Configuration
        Parameters:
          - MasterInstanceType
          - EtcdInstanceType
          - NodesInstanceType
          - AnsibleStorageSize
      - Label:
          default: OpenShift Configuration
        Parameters:
          - OpenshiftContainerPlatformVersion
          - AWSServiceBroker
          - HawkularMetrics
          - AnsibleFromGit
          - ClusterName
          - GlusterFS
          - GlusterStorageSize
          - GlusterStorageType
          - GlusterStorageIops
          - GlusterStorageEncrypted
          - GlusterInstanceType
          - AutomationBroker
          - ClusterConsole
          - AnsiblePostInstallScript
          - AnsibleAdditionalEnvironmentVariables
          - OpenShiftLogGroup
          - OpenShiftAdminPassword
          - RegistryBucket
          - RegistryBucketArn
      - Label:
          default: Red Hat Subscription Information
        Parameters:
          - RedhatSubscriptionUserName
          - RedhatSubscriptionPassword
          - RedhatSubscriptionPoolID
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
    ParameterLabels:
      RegistryBucket:
        default: Registry Bucket Name
      RegistryBucketArn:
        default: Registry Bucket ARN
      KeyPairName:
        default: SSH Key Name
      AmiId:
        default: AMI ID
      QSS3BucketRegion:
        default: Quick Start S3 Bucket Region
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      VPCID:
        default: VPC ID
      RedhatSubscriptionUserName:
        default: Red Hat Subscription User Name
      RedhatSubscriptionPassword:
        default: Red Hat Subscription Password
      RedhatSubscriptionPoolID:
        default: Red Hat Pool ID
      OpenshiftContainerPlatformVersion:
        default: Openshift Container Platform Version
      RemoteAccessCIDR:
        default: Allowed External Access CIDR (OCP UI)
      ContainerAccessCIDR:
        default: Allowed External Access CIDR (OCP Router)
      CertificateArn:
        default: Certificate ARN
      VPCCIDR:
        default: VPC CIDR
      NumberOfAZs:
        default: Number of Availability Zones
      MasterInstanceType:
        default: Master Instance Type
      EtcdInstanceType:
        default: Etcd Instance Type
      NodesInstanceType:
        default: Nodes Instance Type
      AnsibleStorageSize:
        default: Disk storage size of ansible controller server  
      AWSServiceBroker:
        default: AWS Service Broker
      DomainName:
        default: Domain Name
      HostedZoneID:
        default: Route 53 Hosted Zone ID
      SubDomainPrefix:
        default: Subdomain Prefix
      HawkularMetrics:
        default: Hawkular Metrics
      AnsibleFromGit:
        default: Get Ansible from Git
      ClusterName:
        default: Cluster Name
      GlusterFS:
        default: GlusterFS
      GlusterStorageSize:
        default: Gluster Storage Size
      GlusterStorageType:
        default: Gluster EBS volume type
      GlusterInstanceType:
        default: Gluster Instance Type
      GlusterStorageIops:
        default: Gluster Storage Iops
      GlusterStorageEncrypted:
        default: Gluster Storage Encrypted
      AutomationBroker:
        default: OpenShift Automation Broker
      ClusterConsole:
        default: Enable the cluster console (requires OpenShift 3.11)
      AnsiblePostInstallScript:
        default: Ansible post-install script
      AnsibleAdditionalEnvironmentVariables:
        default: Additional ansible environment variables
      KeyGenLambdaArn:
        default: Lambda ARN for the KeyGen Custom Resource
      UnSubscribeLambdaArn:
        default: Lambda ARN for the UnSubscribe Custom Resource
      CleanupPVLambdaArn:
        default: Lambda ARN for the CleanupPV Custom Resource
Parameters:
  NumberOfAZs:
    Default: 3
    Description: The number of Availability Zones to be used for the deployment. 3 Availability Zones are needed to avoid a single point of failure when using 3 or more master nodes or etcd nodes.  With less than 3 Availability Zones.
    Type: Number
    AllowedValues:
      - 1
      - 3
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String
  ContainerAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the Workload (e.g.,
      subnet-a0246dcd)
    Type: String
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the Workload (e.g.,
      subnet-b1f432cd)
    Type: String
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the Workload (e.g.,
      subnet-b1f4a2cd)
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  NumberOfMaster:
    Default: '3'
    Description: This Deployment requires at least 3 OpenShift Master instances
    Type: String
    AllowedPattern: '^[3579]$|(^[1-9]+[13579]$)'
  NumberOfEtcd:
    Default: '3'
    Description: This Deployment requires at least 3 OpenShift Etcd instances
    Type: String
    AllowedPattern: '^[3579]$|(^[1-9]+[13579]$)'
  NumberOfNodes:
    Default: '3'
    Description: The desired capacity for the OpenShift node instances
    Type: Number
  HostedZoneID:
    Description: 'OPTIONAL: Route 53 Hosted Zone ID to use. If left blank route 53
      will not be configured and DNS must be setup manually If you specify this you must also specify DomainName'
    Type: String
    Default: ""
  KeyGenLambdaArn:
    Description: Lambda ARN for the KeyGen Custom Resource
    Type: String
  UnSubscribeLambdaArn:
    Type: String
    Description: Lambda ARN for the UnSubscribe Custom Resource
  CleanupPVLambdaArn:
    Type: String
    Description: Lambda ARN for the CleanupPV Custom Resource
  CertificateArn:
    Description: 'OPTIONAL: Specify the arn of the certificate that will be presented.'
    Type: String
    Default: ""
  AmiId:
    Description: >-
      OPTIONAL: bring your own AMI. In Enterprise environment, you might
      need to bring your own AMI (with proxy, softwares, ...).
      If the AMI is encrypted, keep in mind that the key policy should allow use of
      the key from AWSServiceRoleForAutoScaling.
      If left blank, we'll use the base RHEL image from your region.
    Type: String
    Default: ""
  SubDomainPrefix:
    Default: ''
    Description: 'OPTIONAL: Subdomain to use, if left blank DomainName will be used
      without a prefix. If you specify this you must also specify DomainName and HostedZoneID'
    Type: String
  DomainName:
    Description: >-
      OPTIONAL: domain name configured for the cluster, if left blank self signed
      certificates will be used for TLS and the LoadBalancer's auto-generated hostname
      will be used for connections from outside the cluster.
    Type: String
    Default: ""
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is
      hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-redhat-openshift-4.3-preview/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RedhatSubscriptionUserName:
    Description: Enter Redhat RHN User Name
    Type: String
  RedhatSubscriptionPassword:
    NoEcho: 'true'
    Description: Enter Redhat RHN Password
    Type: String
    AllowedPattern: ^[^ \\']+$
  RedhatSubscriptionPoolID:
    Description: Enter Redhat RHN PoolID
    Type: String
  OpenshiftContainerPlatformVersion:
    Description: OpenShift version to deploy
    Default: '3.11'
    Type: String
    AllowedValues:
      - '3.11'
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  AnsibleSubnetID:
    Description: Subnet ID for Ansible instance
    Type: String
  MasterInstanceType:
    Default: m5.xlarge
    AllowedValues:
      - t3.xlarge
      - t3.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the Master instances
    Type: String
  EtcdInstanceType:
    Default: m5.xlarge
    AllowedValues:
      - t3.xlarge
      - t3.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - t2.large
      - t2.xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the Etcd instances
    Type: String
  NodesInstanceType:
    Default: m5.xlarge
    AllowedValues:
      - t3.xlarge
      - t3.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the Node instances
    Type: String
  AnsibleStorageSize:
    Default: 100
    Description: Ansible Controller Server disk size
    Type: Number
  AWSServiceBroker:
    Default: Enabled
    Description: Enable the AWS Service Broker
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
  HawkularMetrics:
    Default: Enabled
    Description: Enable Hawkular cluster metrics
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
  AnsibleFromGit:
    Default: "False"
    Description: Get OpenShift installer playbooks from GitHub. By default, they come from RPM.
    Type: String
    AllowedValues:
      - "True"
      - "False"
  ClusterName:
    Default: ""
    Description: Custom cluster name for kubernetes.io/cluster/ tags, if left blank will use the stackname suffixed with the region
    Type: String
  GlusterFS:
    Default: Disabled
    Description: Enable GlusterFS storage cluster
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
  GlusterStorageSize:
    Description: Size in GB of the available storage (will create 3x ebs volumes of this size)
    Type: Number
    Default: 1000
  GlusterStorageType:
    Default: io1
    Description: EBS volume type to use for storage
    Type: String
    AllowedValues:
      - io1
      - gp2
      - st1
  GlusterStorageIops:
    Default: 3000
    Description: EBS volume IOPS to allocate (only applicable if io1 has been selected for GlusterStorageType)
    Type: Number
  GlusterStorageEncrypted:
    Default: 'False'
    Description: Enable EBS encryption for Gluster storage volumes
    Type: String
    AllowedValues:
      - 'False'
      - 'True'
  GlusterInstanceType:
    Default: i3.large
    AllowedValues:
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the GlusterFS instances
    Type: String
  NumberOfGluster:
    Default: '3'
    Description: This Deployment requires a minimum of 3 Gluster instances
    Type: Number
  AutomationBroker:
    Default: Enabled
    Description: Enable the OpenShift Automation Service Broker
    Type: String
    AllowedValues: [ Enabled, Disabled ]
  ClusterConsole:
    Default: Enabled
    Description: Enable the Cluster Console
    Type: String
    AllowedValues: [ Enabled, Disabled ]
  AnsiblePostInstallScript:
    AllowedPattern: ^s3://.*|^$
    ConstraintDescription: S3 URI must begin with s3://
    Description: 'OPTIONAL: Specify an S3 URI to a post install script to run on the Ansible config server'
    Default: ''
    Type: String
  AnsibleAdditionalEnvironmentVariables:
    Description: 'OPTIONAL: Specify a comma-separated list of environment variables exported in the Ansible user data.
      Variables must be in the format KEY=VALUE. These are intended to be used by the Ansible post-install script.'
    Default: ''
    Type: String

  OpenShiftLogGroup:
    Description: The CloudWatch Log Group to use for bootstrap and installation logging from the initialization process
    Type: String

  OpenShiftAdminPassword:
    Description: The OpenShift administrative password to use. This will generate a SecretsManager secret
    Type: String
    NoEcho: true

  RegistryBucket:
    Description: The S3 Bucket name for the OpenShift Image Registry
    Type: String

  RegistryBucketArn:
    Description: The S3 Bucket ARN for the OpenShift Image Registry
    Type: String

  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer
      (e.g., subnet-9bc642ac)
    Type: String
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer
      (e.g., subnet-e3246d8e)
    Type: String
  PublicSubnet3ID:
    Description: ID of public subnet 3 in Availability Zone 3 for the ELB load balancer
      (e.g., subnet-e324ad8e)
    Type: String

Resources:

  OpenShiftPasswordSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Ref OpenShiftAdminPassword
  #
  # Creates a Load balancer layer for the cluster
  #
  LoadBalancerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/openshift3/os3-loadbalancer.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        VPCID: !Ref VPCID
        VPCCIDR: !Ref 'VPCCIDR'
        HostedZoneID: !Ref HostedZoneID
        DomainName: !Join
          - ''
          - - !If
              - SetupSubdomain
              - !Sub '${SubDomainPrefix}.'
              - ''
            - !Ref 'DomainName'
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        PrivateSubnet3ID: !Ref PrivateSubnet3ID
        PublicSubnet1ID: !Ref PublicSubnet1ID
        PublicSubnet2ID: !Ref PublicSubnet2ID
        PublicSubnet3ID: !Ref PublicSubnet3ID
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        ContainerAccessCIDR: !Ref ContainerAccessCIDR
        Protocol: !If
          - UseCustomDomain
          - SSL
          - TCP
        NumberOfAZs: 3
        ClusterName: !Ref ClusterName
        SSLCertificateId: !Ref CertificateArn

  #
  # For OpenShift 3, sets up IAM instance profile and IAM role
  #
  OpenShiftRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyName: aws-quick-start-s3-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                Effect: Allow
        - PolicyName: WorkloadSetup
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:Describe*
                  - autoscaling:AttachLoadBalancers
                  - ec2:Describe*
                Resource: '*'
        - PolicyName: K8s-AWSCloudProvider-requirements
          PolicyDocument:
            Statement:
              - Action:
                  - autoscaling:CreateAutoScalingGroup
                  - autoscaling:CreateLaunchConfiguration
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:DeleteAutoScalingGroup
                  - autoscaling:DeleteLaunchConfiguration
                  - autoscaling:SuspendProcesses
                  - autoscaling:ResumeProcesses
                  - autoscaling:AttachLoadBalancerTargetGroups
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:AllocateAddress
                  - ec2:AssociateAddress
                  - ec2:AssociateRouteTable
                  - ec2:AttachInternetGateway
                  - ec2:AttachVolume
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateInternetGateway
                  - ec2:CreateNatGateway
                  - ec2:CreateRoute
                  - ec2:CreateRouteTable
                  - ec2:CreateSecurityGroup
                  - ec2:CreateSubnet
                  - ec2:CreateTags
                  - ec2:CreateVpc
                  - ec2:CreateVolume
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAddresses
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeImages
                  - ec2:DescribeInstances
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribeRegions
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcClassicLink
                  - ec2:DescribeVpcClassicLinkDnsSupport
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifySubnetAttribute
                  - ec2:ModifyVpcAttribute
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:DeleteRoute
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DisassociateRouteTable
                  - ec2:ReplaceRouteTableAssociation
                  - ec2:DeleteRouteTable
                  - ec2:DeleteSubnet
                  - ec2:DescribeNetworkInterfaces
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:DeleteNatGateway
                  - ec2:DeleteSecurityGroup
                  - ec2:DetachInternetGateway
                  - ec2:DeleteInternetGateway
                  - ec2:ReleaseAddress
                  - ec2:DeleteVolume
                  - ec2:DetachVolume
                  - ec2:DeleteVpc
                Effect: Allow
                Resource: '*'
              - Action:
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:CreateLoadBalancerListeners
                  - elasticloadbalancing:ConfigureHealthCheck
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:SetLoadBalancerPoliciesOfListener
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DeleteLoadBalancer
                  - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
                  - elasticloadbalancing:AttachLoadBalancerToSubnets
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:DeleteLoadBalancerListeners
                Effect: Allow
                Resource: '*'
              - Action:
                  - iam:AddRoleToInstanceProfile
                  - iam:CreateInstanceProfile
                  - iam:CreateRole
                  - iam:GetInstanceProfile
                  - iam:GetUser
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:ListInstanceProfilesForRole
                  - iam:ListRoles
                  - iam:DeleteRole
                Effect: Allow
                Resource: '*'
              - Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ChangeTagsForResource
                  - route53:GetChange
                  - route53:GetHostedZone
                  - route53:CreateHostedZone
                  - route53:DeleteHostedZone
                  - route53:ListHostedZones
                  - route53:ListResourceRecordSets
                  - route53:ListTagsForResource
                  - route53:UpdateHostedZoneComment
                Effect: Allow
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:ListBucket
                  - s3:GetBucketCors
                  - s3:GetBucketWebsite
                  - s3:GetBucketVersioning
                  - s3:GetAccelerateConfiguration
                  - s3:GetBucketRequestPayment
                  - s3:GetBucketLogging
                  - s3:GetLifecycleConfiguration
                  - s3:GetBucketReplication
                  - s3:GetReplicationConfiguration
                  - s3:GetBucketLocation
                  - s3:GetBucketTagging
                  - s3:DeleteBucket
                  - s3:PutBucketAcl
                  - s3:PutBucketTagging
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectTagging
                  - s3:GetObjectVersion
                  - s3:DeleteObject
                Resource: arn:aws:s3:::*
              - Action:
                  - sts:GetCallerIdentity
                Effect: Allow
                Resource: '*'
              - Action:
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                Effect: Allow
                Resource: !Ref "AWS::StackId"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Sub '${RegistryBucketArn}'
                  - !Sub '${RegistryBucketArn}/*'
              - Effect: Allow
                Action:
                - 'secretsmanager:GetSecretValue'
                Resource:
                - !Ref RedhatSubscriptionSecret
                - !Ref OpenShiftPasswordSecret

  OpenShiftRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'OpenShiftRole'
  #
  # Sets up AWS Service Broker dependencies
  #
  ServiceBrokerStack:
    Type: AWS::CloudFormation::Stack
    Condition: EnableAWSServiceBroker
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/common/service_broker.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        OpenShiftRoleArn: !GetAtt OpenShiftRole.Arn
        OpenShiftRoleName: !Ref OpenShiftRole

  RedhatSubscriptionSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub '{"user":"${RedhatSubscriptionUserName}","password":"${RedhatSubscriptionPassword}","poolid":"${RedhatSubscriptionPoolID}"}'

  CleanupPV:
    Type: Custom::CleanupPV
    Properties:
      ServiceToken: !Ref 'CleanupPVLambdaArn'
      ClusterId: !Ref ClusterName

  GetRSA:
    Type: Custom::GenerateKeys
    Version: '1.0'
    Properties:
      ServiceToken: !Ref 'KeyGenLambdaArn'
      ResponseURL: !Join
        - ''
        - - http://ResponseURL
          - !Ref 'AWS::StackId'
          - RequestId
      StackId: !Ref 'AWS::StackId'
      ResourceProperties:
        RequestType: Create
        RequestId: !Join
          - ''
          - - !Ref 'AWS::StackId'
            - RequestId
        LogicalResourceId: KeyGenLogicalResourceId


  OpenShiftScalingCWEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: OpenShift-QuickStart-SSM-RunCommand
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: ssm:SendCommand
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${AnsibleConfigServer}'
                  - !Sub 'arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript'


  OpenShiftGlusterLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - GetRSA
      - CleanupPV
    Condition: EnableGlusterFS
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - GetPublicKey
            - AddPublicKey
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        GetPublicKey:
          files:
            /root/.ssh/public.key:
              content: !Sub |
                #QuickStart Generated
                ${GetRSA.PUB}
              mode: '000400'
              owner: root
              group: root
        AddPublicKey:
          commands:
            append-publickey:
              command: cat /root/.ssh/public.key >>/root/.ssh/authorized_keys
              ignoreErrors: 'false'
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !If
        - UseCustomAmi
        - !Ref 'AmiId'
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - RHEL76HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 80
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 110
            VolumeType: gp2
        - DeviceName: /dev/xvdc
          Ebs:
            VolumeSize: !Ref GlusterStorageSize
            VolumeType: !Ref GlusterStorageType
            Iops: !If [ Isio1, !Ref GlusterStorageIops, !Ref 'AWS::NoValue' ]
            Encrypted: !Ref GlusterStorageEncrypted
      InstanceMonitoring: true
      IamInstanceProfile: !Ref OpenShiftRoleProfile
      InstanceType: !Ref 'GlusterInstanceType'
      SecurityGroups:
        - !GetAtt LoadBalancerStack.Outputs.OpenShiftSecurityGroup
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            QSLOCATION=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            export QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export AWS_REGION=${AWS::Region}
            export AWS_STACKNAME=${AWS::StackName}
            export CLUSTER_NAME=${ClusterName}

            export RH_POOLID=${RedhatSubscriptionPoolID}
            export RH_USER=${RedhatSubscriptionUserName}
            export RH_CREDS_ARN='${RedhatSubscriptionSecret}'
            export OCP_VERSION=${OpenshiftContainerPlatformVersion}
            export LAUNCH_CONFIG=OpenShiftGlusterLaunchConfig
            export LOG_GROUP=${OpenShiftLogGroup}
            aws s3 cp ${!QS_S3URI}scripts/bootstrap.sh ./bootstrap.sh
            chmod +x bootstrap.sh
            ./bootstrap.sh || qs_err " bootstrapping failed, see logs for details "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftGlusterASG --region ${AWS::Region}
          -
            S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
  OpenShiftEtcdLaunchConfig:
    DependsOn:
      - GetRSA
      - CleanupPV
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - GetPublicKey
            - AddPublicKey
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        GetPublicKey:
          files:
            /root/.ssh/public.key:
              content: !Sub |
                #QuickStart Generated
                ${GetRSA.PUB}
              mode: '000400'
              owner: root
              group: root
        AddPublicKey:
          commands:
            append-publickey:
              command: cat /root/.ssh/public.key >> /root/.ssh/authorized_keys
              ignoreErrors: 'false'
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !If
        - UseCustomAmi
        - !Ref 'AmiId'
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - RHEL76HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 80
            VolumeType: gp2
      InstanceMonitoring: true
      IamInstanceProfile: !Ref OpenShiftRoleProfile
      InstanceType: !Ref 'EtcdInstanceType'
      SecurityGroups:
        - !GetAtt LoadBalancerStack.Outputs.OpenShiftSecurityGroup
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            export QSLOCATION=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            export QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export AWS_REGION=${AWS::Region}
            export AWS_STACKNAME=${AWS::StackName}
            export CLUSTER_NAME=${ClusterName}
            export RH_POOLID=${RedhatSubscriptionPoolID}
            export RH_USER=${RedhatSubscriptionUserName}
            export RH_CREDS_ARN='${RedhatSubscriptionSecret}'
            export OCP_VERSION=${OpenshiftContainerPlatformVersion}
            export LAUNCH_CONFIG=OpenShiftEtcdLaunchConfig
            export LOG_GROUP=${OpenShiftLogGroup}
            aws s3 cp ${!QS_S3URI}scripts/bootstrap.sh ./bootstrap.sh
            chmod +x bootstrap.sh
            ./bootstrap.sh || qs_err " bootstrapping failed, see logs for details "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftEtcdASG --region ${AWS::Region}
          -
            S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]

  OpenShiftNodesLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - GetRSA
      - CleanupPV
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - GetPublicKey
            - AddPublicKey
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        GetPublicKey:
          files:
            /root/.ssh/public.key:
              content: !Sub |
                #QuickStart Generated
                ${GetRSA.PUB}
              mode: '000400'
              owner: root
              group: root
        AddPublicKey:
          commands:
            append-publickey:
              command: cat /root/.ssh/public.key >>/root/.ssh/authorized_keys
              ignoreErrors: 'false'
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !If
        - UseCustomAmi
        - !Ref 'AmiId'
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - RHEL76HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 80
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 110
            VolumeType: gp2
      InstanceMonitoring: true
      IamInstanceProfile: !Ref OpenShiftRoleProfile
      InstanceType: !Ref 'NodesInstanceType'
      SecurityGroups:
        - !GetAtt LoadBalancerStack.Outputs.OpenShiftSecurityGroup
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            export QSLOCATION=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            export QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export AWS_REGION=${AWS::Region}
            export AWS_STACKNAME=${AWS::StackName}
            export CLUSTER_NAME=${ClusterName}
            export RH_POOLID=${RedhatSubscriptionPoolID}
            export RH_USER=${RedhatSubscriptionUserName}
            export RH_CREDS_ARN='${RedhatSubscriptionSecret}'
            export OCP_VERSION=${OpenshiftContainerPlatformVersion}
            export LAUNCH_CONFIG=OpenShiftNodesLaunchConfig
            export LOG_GROUP=${OpenShiftLogGroup}
            aws s3 cp ${!QS_S3URI}scripts/bootstrap.sh ./bootstrap.sh
            chmod +x bootstrap.sh
            ./bootstrap.sh || qs_err " bootstrapping failed, see logs for details "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftNodeASG --region ${AWS::Region}
          -
            S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]

  OpenShiftMasterASLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - GetRSA
      - CleanupPV
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - GetPublicKey
            - AddPublicKey
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        GetPublicKey:
          files:
            /root/.ssh/public.key:
              content: !Sub |
                #QuickStart Generated
                ${GetRSA.PUB}
              mode: '000400'
              owner: root
              group: root
        AddPublicKey:
          commands:
            append-publickey:
              command: cat /root/.ssh/public.key >>/root/.ssh/authorized_keys
              ignoreErrors: 'false'
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !If
        - UseCustomAmi
        - !Ref 'AmiId'
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - RHEL76HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 80
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 110
            VolumeType: gp2
      InstanceMonitoring: true
      IamInstanceProfile: !Ref OpenShiftRoleProfile
      InstanceType: !Ref 'MasterInstanceType'
      SecurityGroups:
        - !GetAtt LoadBalancerStack.Outputs.OpenShiftSecurityGroup
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            export QSLOCATION=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            export QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export AWS_REGION=${AWS::Region}
            export AWS_STACKNAME=${AWS::StackName}
            export CLUSTER_NAME=${ClusterName}
            export RH_POOLID=${RedhatSubscriptionPoolID}
            export RH_USER=${RedhatSubscriptionUserName}
            export RH_CREDS_ARN='${RedhatSubscriptionSecret}'
            export OCP_VERSION=${OpenshiftContainerPlatformVersion}
            export LAUNCH_CONFIG=OpenShiftMasterASLaunchConfig
            export INTERNAL_MASTER_ELBDNSNAME=${LoadBalancerStack.Outputs.OpenShiftMasterInternalELBDNSName}
            export LOG_GROUP=${OpenShiftLogGroup}
            aws s3 cp ${!QS_S3URI}scripts/bootstrap.sh ./bootstrap.sh
            chmod +x bootstrap.sh
            ./bootstrap.sh || qs_err " bootstrapping failed, see logs for details "
            echo "$(curl http://169.254.169.254/latest/meta-data/local-ipv4) ${LoadBalancerStack.Outputs.OpenShiftMasterInternalELBDNSName}" >> /etc/hosts
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftMasterASG --region ${AWS::Region}
          -
            S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]

  UnSubscribe:
    Type: Custom::UnSubscribe
    Properties:
      ServiceToken: !Ref 'UnSubscribeLambdaArn'
      AnsibleConfigServer: !Ref 'AnsibleConfigServer'
      StackName: !Ref AWS::StackName


  AnsibleConfigServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cfg_node_keys:
            - GetPublicKey
            - AddPublicKey
            - SetPrivateKey
          cfg_networkmgr:
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
        SetPrivateKey:
          files:
            /root/.ssh/id_rsa:
              content: !Sub |
                #QuickStart Generated
                ${GetRSA.PEM}
              mode: '000400'
              owner: root
              group: root
        GetPublicKey:
          files:
            /root/.ssh/public.key:
              content: !Sub |
                #QuickStart Generated
                ${GetRSA.PUB}
              mode: '000400'
              owner: root
              group: root
        AddPublicKey:
          commands:
            append-publickey:
              command: cat /root/.ssh/public.key >>/root/.ssh/authorized_keys
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !If
        - UseCustomAmi
        - !Ref 'AmiId'
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - RHEL76HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref 'AnsibleStorageSize'
            VolumeType: gp2
      IamInstanceProfile: !Ref OpenShiftRoleProfile
      Tags:
        - Key: Name
          Value: ansible-configserver
      InstanceType: !Ref 'MasterInstanceType'
      NetworkInterfaces:
        - DeleteOnTermination: true
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !GetAtt LoadBalancerStack.Outputs.OpenShiftSecurityGroup
          SubnetId: !Ref 'AnsibleSubnetID'
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            export QSLOCATION=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            export ENABLE_HAWKULAR=${HawkEnable}
            export GET_ANSIBLE_FROM_GIT=${AnsibleFromGit}
            export OCP_ANSIBLE_RELEASE=${OsbRelease}
            export MASTER_ELBDNSNAME=${LbHostname}
            export AWS_REGION=${AWS::Region}
            export INTERNAL_MASTER_ELBDNSNAME=${LoadBalancerStack.Outputs.OpenShiftMasterInternalELBDNSName}
            export OPENSHIFTMASTERINTERNALELB=${LoadBalancerStack.Outputs.OpenShiftMasterInternalELB}
            export OPENSHIFTMASTERINTERNALTGARN=${LoadBalancerStack.Outputs.OpenShiftMasterInternalELBTargetGroup}
            export CONTAINERACCESSELB=${LoadBalancerStack.Outputs.ContainerAccessELB}
            export CONTAINERACCESSELB_DNS=${LoadBalancerStack.Outputs.ContainerAccessELBDNSName}
            export OCP_VERSION=${OpenshiftContainerPlatformVersion}
            export ANSIBLE_VERSION=${AnsibleVersion}
            export RH_USER=${RedhatSubscriptionUserName}
            export RH_CREDS_ARN='${RedhatSubscriptionSecret}'
            export RH_POOLID=${RedhatSubscriptionPoolID}
            export AWS_STACKNAME=${AWS::StackName}
            export CLUSTER_NAME=${ClusterName}
            export QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export OCP_PASS_ARN='${OpenShiftPasswordSecret}'
            export AWS_STACKID=${AWS::StackId}
            export ENABLE_AWSSB=${AWSServiceBroker}
            export VPCID=${VPCID}
            export ENABLE_AUTOMATIONBROKER=${AutomationBroker}
            export ENABLE_CLUSTERCONSOLE=${ClusterConsole}
            export ENABLE_GLUSTERFS=${GlusterFS}
            export REGISTRY_BUCKET=${RegBucket}
            export SB_ROLE=${SbRole}
            export SB_TABLE=${SbTable}
            export SB_VERSION=v1.0.1
            export SB_ACCOUNTID=${AWS::AccountId}
            export LOG_GROUP=${OpenShiftLogGroup}
            for e in $(echo "${AnsibleAdditionalEnvironmentVariables}" | tr ',' ' '); do export $e; done
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err "cfn bootstrap failed"
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            aws s3 cp ${!QS_S3URI}scripts/ansibleconfigserver_bootstrap.sh ./bootstrap.sh
            chmod +x bootstrap.sh
            if [[ -n "${AnsiblePostInstallScript}" ]]; then
            mkdir -p /quickstart
            aws s3 cp ${AnsiblePostInstallScript} /quickstart/post-install.sh
            chmod +x /quickstart/post-install.sh
            fi
            ./bootstrap.sh || qs_err " Openshift installation failed, see logs for details "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource AnsibleConfigServer --region ${AWS::Region}
          -
            S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
            HawkEnable: !If [ EnableHawkular, "True", "False" ]
            OsbRelease: !FindInMap [ OpenshiftVersionMap, !Ref 'OpenshiftContainerPlatformVersion', AnsiblePlaybookGitRepoTag ]
            AnsibleVersion: !FindInMap [ OpenshiftVersionMap, !Ref 'OpenshiftContainerPlatformVersion', AnsibleVersion ]
            LbHostname: !If [ UseCustomDomain, !If [ UseSubdomain, !Sub "${SubDomainPrefix}.${DomainName}", !Ref "DomainName" ], !GetAtt LoadBalancerStack.Outputs.OpenShiftMasterELBDNSName ]
            RegBucket: !Ref RegistryBucket
            SbRole: !If [ EnableAWSServiceBroker, !GetAtt ServiceBrokerStack.Outputs.ServiceBrokerRole, "" ]
            SbTable: !If [ EnableAWSServiceBroker, !GetAtt ServiceBrokerStack.Outputs.ServiceBrokerTable, "" ]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT360M

  OpenShiftMasterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LoadBalancerNames:
        - !GetAtt 'LoadBalancerStack.Outputs.OpenShiftMasterELB'
      DesiredCapacity: !Ref 'NumberOfMaster'
      MaxSize: !Ref 'NumberOfMaster'
      MinSize: '1'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 2400
      LaunchConfigurationName: !Ref OpenShiftMasterASLaunchConfig
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: openshift-master
        - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
          PropagateAtLaunch: true
          Value: owned
      VPCZoneIdentifier: !If
        - 3AZCondition
        - -  !Ref 'PrivateSubnet1ID'
          -  !Ref 'PrivateSubnet2ID'
          -  !Ref 'PrivateSubnet3ID'
        - -  !Ref 'PrivateSubnet1ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfMaster'
        Timeout: PT45M

  OpenShiftEtcdASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref 'NumberOfEtcd'
      MaxSize: !Ref 'NumberOfEtcd'
      MinSize: '1'
      LaunchConfigurationName: !Ref OpenShiftEtcdLaunchConfig
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: openshift-etcd
      VPCZoneIdentifier: !If
        - 3AZCondition
        - -  !Ref 'PrivateSubnet1ID'
          -  !Ref 'PrivateSubnet2ID'
          -  !Ref 'PrivateSubnet3ID'
        - -  !Ref 'PrivateSubnet1ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfEtcd'
        Timeout: PT45M

  OpenShiftNodeASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LoadBalancerNames:
        - !GetAtt LoadBalancerStack.Outputs.ContainerAccessELB
      DesiredCapacity: !Ref 'NumberOfNodes'
      MaxSize: '20'
      MinSize: '1'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 1200
      LaunchConfigurationName: !Ref OpenShiftNodesLaunchConfig

      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: openshift-nodes
        - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
          PropagateAtLaunch: true
          Value: owned

      VPCZoneIdentifier: !If
        - 3AZCondition
        - -  !Ref 'PrivateSubnet1ID'
          -  !Ref 'PrivateSubnet2ID'
          -  !Ref 'PrivateSubnet3ID'
        - -  !Ref 'PrivateSubnet1ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfNodes'
        Timeout: PT45M

  OpenShiftGlusterASG:
    Condition: EnableGlusterFS
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref 'NumberOfGluster'
      MaxSize: !Ref 'NumberOfGluster'
      MinSize: '3'
      LaunchConfigurationName: !Ref OpenShiftGlusterLaunchConfig
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: openshift-glusterfs
        - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
          PropagateAtLaunch: true
          Value: owned
      VPCZoneIdentifier: !If
        - 3AZCondition
        - -  !Ref 'PrivateSubnet1ID'
          -  !Ref 'PrivateSubnet2ID'
          -  !Ref 'PrivateSubnet3ID'
        - -  !Ref 'PrivateSubnet1ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfGluster'
        Timeout: PT45M

  OpenShift3ScalingCWEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: CWEvent rule to trigger OpenShift Scaling scripts within the Ansible
        config server. (AWS QuickStart)
      State: ENABLED
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance Launch Successful
          - EC2 Instance Terminate Successful
          - EC2 Instance Terminate Unsuccessful
        detail:
          AutoScalingGroupName:
            - !Ref 'OpenShiftMasterASG'
            - !Ref 'OpenShiftEtcdASG'
            - !Ref 'OpenShiftNodeASG'
      Targets:
        - Id: OSEScalingSSMTarget1
          Arn: !Sub 'arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript'
          Input: !Sub '{"commands":["/bin/aws-ose-qs-scale --scale-in-progress --debug --ocp-version=${OpenshiftContainerPlatformVersion}"],"workingDirectory":["/"],"executionTimeout":["3600"]}'
          RoleArn: !GetAtt 'OpenShiftScalingCWEventRole.Arn'
          RunCommandParameters:
            RunCommandTargets:
              - Key: InstanceIds
                Values:
                  - !Ref 'AnsibleConfigServer'


Conditions:
  UseSubdomain: !Not
    - !Equals
      - !Ref 'SubDomainPrefix'
      - ''
  UseCustomDomain: !Not
    - !Equals
      - !Ref 'DomainName'
      - ''
  3AZCondition: !Equals [!Ref NumberOfAZs, 3]
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
  EnableAWSServiceBroker: !Equals
    - !Ref 'AWSServiceBroker'
    - Enabled
  EnableGlusterFS: !Equals
      - !Ref 'GlusterFS'
      - Enabled
  Isio1: !Equals
    - !Ref 'GlusterStorageType'
    - io1
  UseCustomAmi: !Not
    - !Equals
      - !Ref 'AmiId'
      - ''
  EnableHawkular: !Equals
    - !Ref 'HawkularMetrics'
    - Enabled

  SetupSubdomain: !And
    - !Not
      - !Equals
        - !Ref 'SubDomainPrefix'
        - ''
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC

Mappings:
  AWSAMIRegionMap:
    eu-central-1:
      RHEL76HVM: ami-062dacb006c5860f9
    ap-southeast-2:
      RHEL76HVM: ami-0f1ef883e90ca71c0
    eu-west-1:
      RHEL76HVM: ami-0a0d2dc2f521ddce6
    us-east-1:
      RHEL76HVM: ami-0916c408cb02e310b
    us-east-2:
      RHEL76HVM: ami-03cfe750d5ea278f5
    us-west-2:
      RHEL76HVM: ami-04b7963c90686dd4c
    ap-northeast-1:
      RHEL76HVM: ami-0dc41c7805e171046
    eu-west-2:
      RHEL76HVM: ami-096fbd31de0375d2a
    eu-west-3:
      RHEL76HVM: ami-025fb013ee01513b5
    ap-southeast-1:
      RHEL76HVM: ami-07cafca3788493264
    eu-north-1:
      RHEL76HVM: ami-75941f0b
    ap-south-1:
      RHEL76HVM: ami-021912f2c8d2c70c9
    ap-northeast-2:
      RHEL76HVM: ami-0b5425629eb18a008
    sa-east-1:
      RHEL76HVM: ami-048b2348ac2ccfc53
  OpenshiftVersionMap:
    '3.11':
      AnsiblePlaybookGitRepoTag: 3.11.112-1
      AnsibleVersion: 2.6.6
    '3.10':
      AnsiblePlaybookGitRepoTag: 3.10.143-1
      AnsibleVersion: 2.4.6.0

Outputs:

  OpenShiftMasterASLaunchConfig:
    Description: ''
    Value: !Ref OpenShiftMasterASLaunchConfig

  OpenShiftNodesLaunchConfig:
    Description: ''
    Value: !Ref OpenShiftNodesLaunchConfig

  OpenShiftGlusterLaunchConfig:
    Condition: EnableGlusterFS
    Description: ''
    Value: !Ref OpenShiftGlusterLaunchConfig

  AnsibleConfigServer:
    Description: The EC2 instance that hosts the Ansible config processes
    Value: !Ref AnsibleConfigServer

  ContainerAccessELBName:
    Description: Use this ELB to expose ports to the internet
    Value: !GetAtt LoadBalancerStack.Outputs.ContainerAccessELB

  OpenShiftUI:
    Description: The URL OpenShiftUI
    Value: !Join
      - ''
      - - https://
        - !If [ UseCustomDomain, !If [ UseSubdomain, !Sub "${SubDomainPrefix}.${DomainName}", !Ref "DomainName" ], !GetAtt LoadBalancerStack.Outputs.OpenShiftMasterELBDNSName ]
